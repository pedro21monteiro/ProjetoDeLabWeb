// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjetoDeLabWeb.Data;

namespace ProjetoDeLabWeb.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210115114518_FirstStep")]
    partial class FirstStep
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Administrador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.HasKey("IdUtilizador");

                    b.ToTable("Administrador");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Cliente", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Possui", b =>
                {
                    b.Property<DateTime>("DataPossui")
                        .HasColumnType("date");

                    b.Property<int>("IdPratoDoDia")
                        .HasColumnType("int");

                    b.Property<int>("Idutilizador")
                        .HasColumnType("int");

                    b.Property<decimal?>("Preco")
                        .HasColumnType("money");

                    b.HasKey("DataPossui");

                    b.HasIndex("IdPratoDoDia");

                    b.HasIndex("Idutilizador");

                    b.ToTable("Possui");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.PratoDoDium", b =>
                {
                    b.Property<int>("IdPratoDoDia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DataPrato")
                        .HasColumnType("date");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Foto")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdPratoDoDia");

                    b.ToTable("PratoDoDium");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Preferem", b =>
                {
                    b.Property<int>("IdPratoDoDia")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.HasIndex("IdPratoDoDia");

                    b.HasIndex("IdUtilizador");

                    b.ToTable("Preferem");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.PreferemRestaurante", b =>
                {
                    b.Property<int>("IdUtilizadorCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdUtilizadorRestaurante")
                        .HasColumnType("int");

                    b.HasIndex("IdUtilizadorCliente");

                    b.HasIndex("IdUtilizadorRestaurante");

                    b.ToTable("PreferemRestaurante");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Restaurante", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int");

                    b.Property<string>("DiaDescanco")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Dia_Descanco");

                    b.Property<string>("Foto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gps")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("HorarioFunc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Horario_func");

                    b.Property<string>("Morada")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("TipoServico")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("Restaurante");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Utilizador", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Motivo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("_Password");

                    b.Property<bool>("RegistoConfirmado")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Administrador", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Administrador")
                        .HasForeignKey("ProjetoDeLabWeb.Models.Administrador", "IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Cliente", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Cliente")
                        .HasForeignKey("ProjetoDeLabWeb.Models.Cliente", "IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Possui", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.PratoDoDium", "IdPratoDoDiaNavigation")
                        .WithMany("Possuis")
                        .HasForeignKey("IdPratoDoDia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoDeLabWeb.Models.Restaurante", "IdutilizadorNavigation")
                        .WithMany("Possuis")
                        .HasForeignKey("Idutilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPratoDoDiaNavigation");

                    b.Navigation("IdutilizadorNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Preferem", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.PratoDoDium", "IdPratoDoDiaNavigation")
                        .WithMany()
                        .HasForeignKey("IdPratoDoDia")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoDeLabWeb.Models.Cliente", "IdUtilizadorNavigation")
                        .WithMany()
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdPratoDoDiaNavigation");

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.PreferemRestaurante", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.Cliente", "IdUtilizadorClienteNavigation")
                        .WithMany()
                        .HasForeignKey("IdUtilizadorCliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjetoDeLabWeb.Models.Restaurante", "IdUtilizadorRestauranteNavigation")
                        .WithMany()
                        .HasForeignKey("IdUtilizadorRestaurante")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorClienteNavigation");

                    b.Navigation("IdUtilizadorRestauranteNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Restaurante", b =>
                {
                    b.HasOne("ProjetoDeLabWeb.Models.Utilizador", "IdUtilizadorNavigation")
                        .WithOne("Restaurante")
                        .HasForeignKey("ProjetoDeLabWeb.Models.Restaurante", "IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.PratoDoDium", b =>
                {
                    b.Navigation("Possuis");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Restaurante", b =>
                {
                    b.Navigation("Possuis");
                });

            modelBuilder.Entity("ProjetoDeLabWeb.Models.Utilizador", b =>
                {
                    b.Navigation("Administrador");

                    b.Navigation("Cliente");

                    b.Navigation("Restaurante");
                });
#pragma warning restore 612, 618
        }
    }
}
